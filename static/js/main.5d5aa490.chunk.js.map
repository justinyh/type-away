{"version":3,"sources":["components/Home.js","components/PlayerStatus.js","components/TypeScreen.js","components/Timer.js","components/Game.js","components/App.js","serviceWorker.js","index.js"],"names":["Home","props","name","className","onChange","this","setName","onClick","play","Component","PlayerStatus","players","map","player","key","id","gameLeader","finished","speed","TypeScreen","state","words","updateParent","bind","disallowMultipleSpace","e","excerptWords","excerpt","match","target","innerHTML","replace","correctWords","i","length","console","log","splice","setState","update","finish","which","endsWith","preventDefault","onKeyDown","onKeyUp","contentEditable","style","backgroundColor","Timer","time","callback","prototype","start","interval","setInterval","stop","clearInterval","reset","onTick","Game","timer","socket","showStart","showWait","end","message","startGame","startClick","updateWords","stopGame","io","emit","on","details","detailObj","JSON","parse","listenToMessages","showStop","sendUpdates","gameLead","Math","round","App","value","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5d5aa490.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.name = '';\n  }\n\n  render() {\n    return (\n      <div className=\"Background\">\n            <h1>The game</h1>\n            <label>Please enter your name:</label><input onChange={this.props.setName}></input>\n            <button onClick={this.props.play}>Continue</button>\n      </div>\n    );\n  }\n  \n}\nexport default Home;","import React, { Component } from 'react';\nclass PlayerStatus extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render() {\n      return (\n          <div className=\"Background\">\n              {this.props.players.map((player) => <div key={player.id}>{player.name}{player.gameLeader && \" * GAMELEADER\"}\n              {player.finished && ` FINISHED w/ ${player.speed} WPM` }\n              </div>)}\n        </div>\n      );\n    }\n    \n  }\n  export default PlayerStatus;","import React, { Component } from 'react';\n\nclass TypeScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        words: 0,\n    }\n    this.updateParent = this.updateParent.bind(this);\n    this.disallowMultipleSpace = this.disallowMultipleSpace.bind(this);\n\n  }\n\n  updateParent(e) {\n    let excerptWords = this.props.excerpt.match(/\\S+/g);\n    let str = e.target.innerHTML;\n    const words = str.replace(/&nbsp;/, \" \").match(/\\S+/g);\n    const correctWords = [...words];\n    if (!!words){\n        for (let i = words.length; i >= 0; i--) { \n            console.log(\"comparing \", correctWords[i], \" to \", excerptWords[i]);\n            let curr = correctWords[i];\n            if (curr !== excerptWords[i]) {\n                correctWords.splice(i, 1);\n            }\n        }\n        this.setState({words: correctWords.length}, () => this.props.update(this.state.words));\n        console.log(\"words: \", words.length, \" excerpt: \", excerptWords.length);\n        if (words.length > excerptWords.length) {\n            this.props.finish();\n        }\n    }\n    else {\n        this.setState({words: 0});\n    }\n    console.log(\"excerpt: \", excerptWords);\n    console.log(words);\n  }\n\n  disallowMultipleSpace(e) {\n    if (e.which === 32 && e.target.innerHTML.endsWith(\"nbsp;\")) {\n        e.preventDefault();\n        return false;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Background\">\n            {this.props.excerpt}\n            <div onKeyDown={this.disallowMultipleSpace} onKeyUp={this.updateParent} className=\"typebox\" contentEditable=\"true\" style={{backgroundColor:'blue'}}></div>\n      </div>\n    );\n  }\n  \n}\nexport default TypeScreen;","function Timer() {\n\tthis.time = 0;\n\tthis.callback = null;\n  }\n  \nTimer.prototype.start = function start() {\n\tthis.interval = setInterval(() => {\n\t\tthis.time += 1;\n\t\tif (!!this.callback) {\n\t\t\tthis.callback(this.time);\n\t\t}\n\t}, 1000);\n};\n\nTimer.prototype.stop = function stop() {\n\tclearInterval(this.interval);\n};\n\nTimer.prototype.reset = function reset() {\n\tthis.time = 0;\n};\n\nTimer.prototype.onTick = function onTick(callback) {\n\tthis.callback = callback;\n};\n\nexport default Timer;","import React, { Component } from 'react';\nimport PlayerStatus from './PlayerStatus';\nimport TypeScreen from './TypeScreen';\nimport io from 'socket.io-client';\nimport Timer from './Timer';\n\nconst connection = \"https://e39e09819e6e.ngrok.io\";\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.name = '';\n    this.timer = new Timer;\n    this.socket = null;\n    this.state = {\n        gameLeader: false,\n        showStart: false,\n        showWait: false,\n        start: false,\n        end: false,\n        timer: null,\n        time: 3,\n        words: 0,\n        message: \"\",\n        players: [],\n        excerpt: \"\"\n    };\n    this.startGame = this.startGame.bind(this);\n    this.startClick = this.startClick.bind(this);\n    this.updateWords = this.updateWords.bind(this);\n    this.stopGame = this.stopGame.bind(this);\n  }\n  listenToMessages() {\n    this.socket = io(connection);\n    this.socket.emit('join', this.props.name);\n    this.socket.on('start', (excerpt) => {\n      this.setState({excerpt: excerpt})\n      this.startGame();\n    });\n    this.socket.on('playerchange', (details) => {\n      const detailObj = JSON.parse(details);\n      console.log(detailObj);\n      if (this.socket.id === detailObj.gameLeader) {\n        this.setState({gameLeader: true, showStart: true});\n      }\n      this.setState({players: detailObj.players});\n    });\n    this.socket.on('gameupdate', (details) => {\n      const detailObj = JSON.parse(details);\n      this.setState({players: detailObj.players});\n    })\n    this.socket.on('gamefinished', () => {\n      if (this.state.gameLeader) {\n        this.setState({showStart: true});\n      }\n      this.setState({showWait: false});\n    });\n  }\n  \n  componentDidMount() {\n    this.listenToMessages();\n    this.timer.onTick((time) => { this.setState({ time: time})});\n  }\n\n  sendUpdates() {\n    this.interval = setInterval(() => {\n      this.socket.emit('update', {time: this.state.time, words: this.state.words});\n    }, 500);\n  }\n  \n  startClick() {\n    this.setState({time: 3, start: false, end: false, words: 0});\n    this.timer.reset();\n    this.socket.emit('startgame');\n    this.setState({showStart: false});\n  }\n\n\n  startGame() {\n    this.interval = setInterval(() => {\n      this.setState({time: this.state.time - 1});\n      if (this.state.time === 0) {\n        clearInterval(this.interval);\n        this.setState({start: true, showStop: true});\n        this.timer.start(); \n        this.sendUpdates();\n      }\n      }\n      , 1000);\n  }\n\n  isLeader() {\n    let gameLead = false;\n    if (this.socket && this.socket.id === this.gameLeader) {\n      gameLead = true;\n    }\n    return gameLead;\n  }\n\n  stopGame() {\n    this.setState({start: false, end: true, showStop: false, showWait: true});\n    this.timer.stop();\n    clearInterval(this.interval);\n    this.socket.emit('playerfinish', {words: this.state.words, time: this.state.time});\n  }\n\n  updateWords(words) {\n    this.setState({words: words});  \n  }\n\n  render() {\n    return (\n        <div className=\"Background\">\n        <PlayerStatus players={this.state.players} gameLeader={this.state.gameLeader}/>\n        {this.state.start ? <TypeScreen update={this.updateWords} finish={this.stopGame} excerpt={this.state.excerpt}/> : \"Loading\"}\n        <div>Time: {this.state.time}</div>\n        <div>Correct Words: {this.state.words}</div>\n    <div>WPM: {Math.round(60 * this.state.words / this.state.time)}</div>\n        {!this.state.start}\n        {this.state.showStart && <button onClick={this.startClick}>Start Game</button>}\n        {this.state.showWait && <div>Please wait for other players to finish.</div>}\n      </div>\n    );\n  }\n  \n}\nexport default Game;","import React, { Component } from 'react';\nimport Home from './Home';\nimport Game from './Game';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { play: false}\n    this.play = this.play.bind(this);\n    this.setName = this.setName.bind(this);\n  }\n\n  play() {\n    this.setState({ play: true});\n  }\n  setName(e) {\n    this.name = e.target.value;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        { this.state.play ?\n          <Game name={this.name} /> :\n          <Home play={this.play} setName={this.setName} />\n        }\n      </div>\n    );\n  }\n  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}