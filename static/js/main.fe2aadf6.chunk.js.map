{"version":3,"sources":["components/Home.js","components/PlayerStatus.js","components/TypeScreen.js","components/Timer.js","components/Game.js","components/App.js","serviceWorker.js","index.js"],"names":["Home","props","name","className","onChange","this","setName","onClick","play","Component","PlayerStatus","players","map","player","key","id","TypeScreen","state","words","updateParent","bind","disallowMultipleSpace","e","excerptWords","excerpt","match","target","innerHTML","replace","i","length","console","log","splice","setState","update","which","endsWith","preventDefault","onKeyDown","onKeyUp","contentEditable","style","backgroundColor","Timer","time","callback","prototype","start","interval","setInterval","stop","clearInterval","reset","onTick","Game","timer","end","message","startGame","startClick","updateWords","stopGame","socket","io","emit","on","JSON","parse","listenToMessages","sendUpdates","Math","round","App","value","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.fe2aadf6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.name = '';\n  }\n\n  render() {\n    return (\n      <div className=\"Background\">\n            <h1>The game</h1>\n            <label>Please enter your name:</label><input onChange={this.props.setName}></input>\n            <button onClick={this.props.play}>Continue</button>\n      </div>\n    );\n  }\n  \n}\nexport default Home;","import React, { Component } from 'react';\nclass PlayerStatus extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render() {\n      return (\n          <div className=\"Background\">\n              {this.props.players.map((player) => <div key={player.id}>{player.name}</div>)}\n        </div>\n      );\n    }\n    \n  }\n  export default PlayerStatus;","import React, { Component } from 'react';\n\nclass TypeScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        words: 0,\n    }\n    this.updateParent = this.updateParent.bind(this);\n    this.disallowMultipleSpace = this.disallowMultipleSpace.bind(this);\n\n  }\n\n  updateParent(e) {\n    let excerptWords = this.props.excerpt.match(/\\S+/g);\n    let str = e.target.innerHTML;\n    const words = str.replace(/&nbsp;/, \" \").match(/\\S+/g);\n    if (!!words){\n        for (let i = words.length; i >= 0; i--) { \n            console.log(\"comparing \", words[i], \" to \", excerptWords[i]);\n            let curr = words[i];\n            if (curr !== excerptWords[i]) {\n                words.splice(i, 1);\n            }\n        }\n        this.setState({words: words.length}, () => this.props.update(this.state.words));\n    }\n    else {\n        this.setState({words: 0});\n    }\n    console.log(\"excerpt: \", excerptWords);\n    console.log(words);\n  }\n\n  disallowMultipleSpace(e) {\n    if (e.which === 32 && e.target.innerHTML.endsWith(\"nbsp;\")) {\n        e.preventDefault();\n        return false;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Background\">\n            {this.props.excerpt}\n            <div onKeyDown={this.disallowMultipleSpace} onKeyUp={this.updateParent} className=\"typebox\" contentEditable=\"true\" style={{backgroundColor:'blue'}}></div>\n      </div>\n    );\n  }\n  \n}\nexport default TypeScreen;","function Timer() {\n\tthis.time = 0;\n\tthis.callback = null;\n  }\n  \nTimer.prototype.start = function start() {\n\tthis.interval = setInterval(() => {\n\t\tthis.time += 1;\n\t\tif (!!this.callback) {\n\t\t\tthis.callback(this.time);\n\t\t}\n\t}, 1000);\n};\n\nTimer.prototype.stop = function stop() {\n\tclearInterval(this.interval);\n};\n\nTimer.prototype.reset = function reset() {\n\tthis.time = 0;\n};\n\nTimer.prototype.onTick = function onTick(callback) {\n\tthis.callback = callback;\n};\n\nexport default Timer;","import React, { Component } from 'react';\nimport PlayerStatus from './PlayerStatus';\nimport TypeScreen from './TypeScreen';\nimport io from 'socket.io-client';\nimport Timer from './Timer';\n\nconst connection = \"https://e39e09819e6e.ngrok.io\";\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.name = '';\n    this.timer = new Timer;\n    this.state = {\n        start: false,\n        end: false,\n        timer: null,\n        time: 3,\n        words: 0,\n        message: \"\",\n        players: [],\n        excerpt: \"\"\n    };\n    this.startGame = this.startGame.bind(this);\n    this.startClick = this.startClick.bind(this);\n    this.updateWords = this.updateWords.bind(this);\n    this.stopGame = this.stopGame.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  listenToMessages() {\n    this.socket = io(connection);\n    this.socket.emit('join', this.props.name);\n    this.socket.on('start', (excerpt) => {\n      this.setState({excerpt: excerpt})\n      this.startGame();\n    });\n    this.socket.on('playerchange', (players) => this.setState({players: JSON.parse(players)}));\n  }\n  \n  componentDidMount() {\n    this.listenToMessages();\n    this.timer.onTick((time) => { this.setState({ time: time})});\n  }\n\n  sendUpdates() {\n    this.interval = setInterval(() => {\n      this.socket.emit('update', {time: this.state.time, words: this.state.words});\n    }, 500);\n  }\n  \n  startClick() {\n    this.socket.emit('startgame');\n  }\n\n  reset() {\n    this.setState({time: 3, start: false, end: false, words: 0});\n    this.timer.reset();\n  }\n\n  startGame() {\n    this.interval = setInterval(() => {\n      this.setState({time: this.state.time - 1});\n      if (this.state.time === 0) {\n        clearInterval(this.interval);\n        this.setState({start: true})\n        this.timer.start(); \n        this.sendUpdates();\n      }\n      }\n      , 1000);\n  }\n\n  stopGame() {\n    this.timer.stop();\n    this.setState({start: false, end: true});\n    clearInterval(this.interval);\n  }\n\n  updateWords(words) {\n    this.setState({words: words});  \n  }\n\n  render() {\n    return (\n        <div className=\"Background\">\n        <PlayerStatus players={this.state.players}/>\n        {this.state.start ? <TypeScreen update={this.updateWords} start={this.state.start} excerpt={this.state.excerpt}/> : \"Loading\"}\n        <div>Time: {this.state.time}</div>\n        <div>Correct Words: {this.state.words}</div>\n    <div>WPM: {Math.round(60 * this.state.words / this.state.time)}</div>\n        {(this.state.start && !this.state.end) ? <button onClick={this.stopGame}>Stop</button> : \"\"}\n        {(!this.state.start && !this.state.end) ? <button onClick={this.startClick}>Start Game</button> : \"\"}\n        {this.state.start}\n        {this.state.end ? <button onClick={this.reset}>Try again.</button> : \"\"}\n      </div>\n    );\n  }\n  \n}\nexport default Game;","import React, { Component } from 'react';\nimport Home from './Home';\nimport Game from './Game';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { play: false}\n    this.play = this.play.bind(this);\n    this.setName = this.setName.bind(this);\n  }\n\n  play() {\n    this.setState({ play: true});\n  }\n  setName(e) {\n    this.name = e.target.value;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        { this.state.play ?\n          <Game name={this.name} /> :\n          <Home play={this.play} setName={this.setName} />\n        }\n      </div>\n    );\n  }\n  \n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}